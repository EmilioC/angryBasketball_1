{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/cordo/VisualCode/appProject/angular/chatGPT_1-2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from '../environments/environment';\nimport { gptModels } from '../models/constants';\nimport { frasesChiquito } from '../../assets/data/arrayFrasesChiquito';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction CustomerSupportComponent_img_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 13);\n  }\n}\nfunction CustomerSupportComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 14)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", item_r2.person, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getText(item_r2.response), \" \");\n  }\n}\nexport class CustomerSupportComponent {\n  constructor() {\n    this.chatConversation = [];\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.roleSystem = 'system';\n    this.roleUser = 'user';\n    this.arrayFrasesChiquito = frasesChiquito;\n    this.promptTextModificado = 'responde gracioso, añadiendo durante tu respuesta varias convinaciones de la siguiente frase:';\n    this.showSpinner = false;\n    this.messages = [];\n    this.temperature = 0;\n    this.rabbitState = '';\n  }\n  ngOnInit() {}\n  fraseAleatoria(array) {\n    const indice = Math.floor(Math.random() * array.length);\n    return array[indice];\n  }\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'Fistro pecador', 'person');\n    this.invokeGPT();\n    this.promptText = '';\n  }\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.unshift(chatToPush);\n  }\n  pushChatContentTurbo(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.unshift(chatToPush);\n  }\n  getText(data) {\n    console.log(data);\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n  invokeGPT() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        /*       let requestData={\r\n                model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\r\n                prompt: this.promptTextModificado + this.fraseAleatoria(frasesChiquito) + this.promptText,//this.generatePrompt(animal),\r\n                temperature: 0.95,\r\n                max_tokens: 100,\r\n                top_p: 1.0,\r\n                frequency_penalty: 0.0,\r\n                presence_penalty: 0.0,\r\n              };\r\n        \r\n                    this.showSpinner = true;\r\n              let apiResponse =  await openai.createCompletion(requestData);\r\n        \r\n              this.response = apiResponse.data as ResponseModel;\r\n              this.pushChatContent(this.response.choices[0].text.trim(),'ChiquiTronic','bot');\r\n         */\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createChatCompletion({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            'role': 'system',\n            content: \"eres un humorista\"\n          }, {\n            'role': 'user',\n            content: _this.promptText\n          }],\n          temperature: 1\n        });\n        console.log(\"API RESPONSE: \", _this.response);\n        /* this.response = apiResponse.data as ResponseModel; */\n        _this.response = apiResponse.data;\n        console.log(_this.response.choices[0].message[0]);\n        _this.pushChatContent(_this.response.choices[0].text, 'ChiquiTronic', 'bot');\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false;\n        // Consider adjusting the error handling logic for your use case\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n          _this.pushChatContent(\"Madre mía ¡¡ los cien caballos de bonanza se me han escapao ¡¡\", 'ChiquiTronic', 'bot');\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n  startAnimation() {\n    this.rabbitState = 'running';\n    setTimeout(() => {\n      this.rabbitState = 'love';\n      setTimeout(() => {\n        this.rabbitState = '';\n      }, 500);\n    }, 2000);\n  }\n}\nCustomerSupportComponent.ɵfac = function CustomerSupportComponent_Factory(t) {\n  return new (t || CustomerSupportComponent)();\n};\nCustomerSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerSupportComponent,\n  selectors: [[\"app-customer-support\"]],\n  decls: 21,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"d-flex\", \"justify-content-end\"], [\"type\", \"search\", \"placeholder\", \"IntroduceloL \\u00A1\\u00A1 by milio raban\", \"aria-label\", \"Search\", 1, \"form-control\", \"me-2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"neon\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"frame-box\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\"], [1, \"card-text\", \"padding\", 3, \"ngClass\"]],\n  template: function CustomerSupportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function CustomerSupportComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.promptText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function CustomerSupportComponent_Template_button_click_4_listener() {\n        return ctx.checkResponse();\n      });\n      i0.ɵɵtext(5, \"comol\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"h4\", 7);\n      i0.ɵɵtext(10, \"Chiqui Chat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 8);\n      i0.ɵɵelement(12, \"h6\", 9);\n      i0.ɵɵelementStart(13, \"div\", 1);\n      i0.ɵɵelement(14, \"div\", 5);\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"div\", 10)(17, \"div\");\n      i0.ɵɵtemplate(18, CustomerSupportComponent_img_18_Template, 1, 0, \"img\", 11);\n      i0.ɵɵtemplate(19, CustomerSupportComponent_div_19_Template, 5, 3, \"div\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";AACA,SAASA,aAAa,EAAEC,SAAS,QAAU,QAAQ;AACnD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,SAASC,cAAc,QAAQ,uCAAuC;;;;;;ICuDjCC,0BAAgF;;;;;IACrFA,2BAA2C;IAEhCA,YAAgB;IAAAA,iBAAI;IAACA,YAC5B;IAAAA,iBAAI;;;;;IAFyBA,eAAyB;IAAzBA,0CAAyB;IAC/CA,eAAgB;IAAhBA,8CAAgB;IAAKA,eAC5B;IAD4BA,iEAC5B;;;ADpDpC,OAAM,MAAOC,wBAAwB;EAenCC;IAbE,qBAAgB,GAAgB,EAAE;IAGlC,cAAS,GAAGJ,SAAS;IACrB,eAAU,GAAG,EAAE;IACf,eAAU,GAAW,QAAQ;IAC7B,aAAQ,GAAW,MAAM;IACzB,wBAAmB,GAAGC,cAAc;IACpC,yBAAoB,GAAG,+FAA+F;IACtH,gBAAW,GAAG,KAAK;IACnB,aAAQ,GAAa,EAAE;IACvB,gBAAW,GAAU,CAAC;IAoGxB,gBAAW,GAAW,EAAE;EAlGR;EAEhBI,QAAQ,IACR;EAEAC,cAAc,CAACC,KAAe;IAC5B,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAACK,MAAM,CAAC;IACvD,OAAOL,KAAK,CAACC,MAAM,CAAC;EACtB;EAEAK,aAAa;IACX,IAAI,CAACC,eAAe,CAAC,IAAI,CAACC,UAAU,EAAC,gBAAgB,EAAC,QAAQ,CAAC;IAC/D,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACD,UAAU,GAAG,EAAE;EACtB;EAEAD,eAAe,CAACG,OAAc,EAAEC,MAAa,EAAEC,QAAe;IAC5D,MAAMC,UAAU,GAAgB;MAAEF,MAAM,EAACA,MAAM;MAAEG,QAAQ,EAACJ,OAAO;MAAEE,QAAQ,EAACA;IAAQ,CAAC;IACrF,IAAI,CAACG,gBAAgB,CAACC,OAAO,CAACH,UAAU,CAAC;EAC3C;EAEAI,oBAAoB,CAACP,OAAc,EAAEC,MAAa,EAAEC,QAAe;IACjE,MAAMC,UAAU,GAAG;MAAEF,MAAM,EAACA,MAAM;MAAEG,QAAQ,EAACJ,OAAO;MAAEE,QAAQ,EAACA;IAAQ,CAAC;IACxE,IAAI,CAACG,gBAAgB,CAACC,OAAO,CAACH,UAAU,CAAC;EAC3C;EAGAK,OAAO,CAACC,IAAW;IACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOA,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,CAAC,IAAEA,CAAC,CAACnB,MAAM,GAAC,CAAC,CAAC;EAE/C;EAEMI,SAAS;IAAA;IAAA;MAGb,IAAG,KAAI,CAACD,UAAU,CAACH,MAAM,GAAC,CAAC,EAC3B;MACA,IAAG;QACD,KAAI,CAACS,QAAQ,GAAGW,SAAS;QACzB,IAAIC,aAAa,GAAG,IAAIpC,aAAa,CAAC;UAACqC,MAAM,EAAEnC,WAAW,CAACmC;QAAM,CAAC,CAAC;QACnE,IAAIC,MAAM,GAAG,IAAIrC,SAAS,CAACmC,aAAa,CAAC;QAE/C;;;;;;;;;;;;;;;;QAiBM,KAAI,CAACG,WAAW,GAAG,IAAI;QACvB,IAAIC,WAAW,SAAUF,MAAM,CAACG,oBAAoB,CAClD;UACEC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAG,CACT;YAAC,MAAM,EAAE,QAAQ;YAAEvB,OAAO,EAAE;UAAmB,CAAC,EAChD;YAAC,MAAM,EAAE,MAAM;YAAEA,OAAO,EAAE,KAAI,CAACF;UAAU,CAAC,CAC3C;UAED0B,WAAW,EAAG;SACf,CACF;QACDd,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAC,KAAI,CAACP,QAAQ,CAAC;QAE3C;QAGA,KAAI,CAACA,QAAQ,GAAGgB,WAAW,CAACX,IAAqB;QACjDC,OAAO,CAACC,GAAG,CAAC,KAAI,CAACP,QAAQ,CAACqB,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChD,KAAI,CAAC7B,eAAe,CAAC,KAAI,CAACO,QAAQ,CAACqB,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,EAAC,cAAc,EAAC,KAAK,CAAC;QAGxE,KAAI,CAACR,WAAW,GAAG,KAAK;OAEzB,QAAMS,KAAS,EAAE;QAChB,KAAI,CAACT,WAAW,GAAG,KAAK;QACxB;QACA,IAAIS,KAAK,CAACxB,QAAQ,EAAE;UAClBM,OAAO,CAACkB,KAAK,CAACA,KAAK,CAACxB,QAAQ,CAACyB,MAAM,EAAED,KAAK,CAACxB,QAAQ,CAACK,IAAI,CAAC;UACzD,KAAI,CAACZ,eAAe,CAAC,gEAAgE,EAAC,cAAc,EAAC,KAAK,CAAC;SAE5G,MAAM;UACLa,OAAO,CAACkB,KAAK,CAAC,kCAAkCA,KAAK,CAACF,OAAO,EAAE,CAAC;;;IAGnE;EACH;EAIAI,cAAc;IACZ,IAAI,CAACC,WAAW,GAAG,SAAS;IAC5BC,UAAU,CAAC,MAAK;MACd,IAAI,CAACD,WAAW,GAAG,MAAM;MACzBC,UAAU,CAAC,MAAK;QACd,IAAI,CAACD,WAAW,GAAG,EAAE;MACvB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,EAAE,IAAI,CAAC;EACV;;AA3HW7C,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAA+C;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC0BrCpD,8BAAuB;MAQsCA;QAAA;MAAA,EAAwB;MAAzEA,iBACiE;MACjEA,iCAAkF;MAA1BA;QAAA,OAASqD,mBAAe;MAAA,EAAC;MAACrD,qBAAK;MAAAA,iBAAS;MAEpGA,8BAAuB;MACnBA,qBAAI;MACJA,8BAAkB;MACsBA,4BAAW;MAAAA,iBAAK;MACpDA,+BAAuB;MACnBA,yBAAgD;MAChDA,+BAAiB;MACbA,0BAA6B;MAC7BA,+BAAuB;MAEVA,4EAAgF;MACrFA,4EAIM;MAENA,iBAAM;MAEVA,sBAAI;MAERA,iBAAM;;;MAzB+BA,eAAwB;MAAxBA,wCAAwB;MAcdA,gBAAiB;MAAjBA,sCAAiB;MAClCA,eAAmB;MAAnBA,8CAAmB","names":["Configuration","OpenAIApi","environment","gptModels","frasesChiquito","i0","CustomerSupportComponent","constructor","ngOnInit","fraseAleatoria","array","indice","Math","floor","random","length","checkResponse","pushChatContent","promptText","invokeGPT","content","person","cssClass","chatToPush","response","chatConversation","unshift","pushChatContentTurbo","getText","data","console","log","split","filter","f","undefined","configuration","apiKey","openai","showSpinner","apiResponse","createChatCompletion","model","messages","temperature","choices","message","text","error","status","startAnimation","rabbitState","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\cordo\\VisualCode\\appProject\\angular\\chatGPT_1-2\\src\\app\\customer-support\\customer-support.component.ts","C:\\Users\\cordo\\VisualCode\\appProject\\angular\\chatGPT_1-2\\src\\app\\customer-support\\customer-support.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Configuration, OpenAIApi,  } from 'openai';\nimport { environment } from '../environments/environment';\nimport { gptModels } from '../models/constants';\nimport { ChatWithBot, ResponseModel, ResponseModelTurbo } from '../models/gpt-response';\nimport { frasesChiquito } from '../../assets/data/arrayFrasesChiquito';\nimport { User } from '../gifs/interfaces/gifs.interface';\n\n@Component({\n  selector: 'app-customer-support',\n  templateUrl: './customer-support.component.html'\n})\nexport class CustomerSupportComponent implements OnInit {\n\n    chatConversation: ChatWithBot[]=[];\n    response!: ResponseModel | undefined;\n    responseTurbo!: ResponseModelTurbo | undefined;\n    gptModels = gptModels;\n    promptText = '';\n    roleSystem :string = 'system';\n    roleUser :string = 'user'\n    arrayFrasesChiquito = frasesChiquito;\n    promptTextModificado = 'responde gracioso, añadiendo durante tu respuesta varias convinaciones de la siguiente frase:'\n    showSpinner = false;\n    messages: string []= [];\n    temperature: number= 0;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  fraseAleatoria(array: string[]) {\n    const indice = Math.floor(Math.random() * array.length);\n    return array[indice];\n  }\n\n  checkResponse() {\n    this.pushChatContent(this.promptText,'Fistro pecador','person');\n    this.invokeGPT();\n    this.promptText = '';\n  }\n\n  pushChatContent(content:string, person:string, cssClass:string) {\n    const chatToPush: ChatWithBot = { person:person, response:content, cssClass:cssClass};\n    this.chatConversation.unshift(chatToPush);\n  }\n\n  pushChatContentTurbo(content:string, person:string, cssClass:string) {\n    const chatToPush = { person:person, response:content, cssClass:cssClass};\n    this.chatConversation.unshift(chatToPush);\n  }\n\n\n  getText(data:string) {\n    console.log(data);\n    return data.split('\\n').filter(f=>f.length>0);\n    \n  }\n\n  async invokeGPT() {\n   \n\n    if(this.promptText.length<2)\n    return;\n    try{\n      this.response = undefined;\n      let configuration = new Configuration({apiKey: environment.apiKey});\n      let openai = new OpenAIApi(configuration);\n\n/*       let requestData={\n        model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\n        prompt: this.promptTextModificado + this.fraseAleatoria(frasesChiquito) + this.promptText,//this.generatePrompt(animal),\n        temperature: 0.95,\n        max_tokens: 100,\n        top_p: 1.0,\n        frequency_penalty: 0.0,\n        presence_penalty: 0.0,\n      };\n\n            this.showSpinner = true;\n      let apiResponse =  await openai.createCompletion(requestData);\n\n      this.response = apiResponse.data as ResponseModel;\n      this.pushChatContent(this.response.choices[0].text.trim(),'ChiquiTronic','bot'); \n */\n\n      this.showSpinner = true;\n      let apiResponse =  await openai.createChatCompletion(\n        {\n          model: 'gpt-3.5-turbo',\n          messages : [\n            {'role': 'system', content: \"eres un humorista\"},\n            {'role': 'user', content: this.promptText}\n          ]\n          ,\n          temperature : 1\n        }\n      )\n      console.log(\"API RESPONSE: \",this.response);\n\n      /* this.response = apiResponse.data as ResponseModel; */\n\n      \n      this.response = apiResponse.data as ResponseModel;\n      console.log(this.response.choices[0].message[0]);\n      this.pushChatContent(this.response.choices[0].text,'ChiquiTronic','bot'); \n\n\n      this.showSpinner = false;\n      \n    }catch(error:any) {\n      this.showSpinner = false;\n      // Consider adjusting the error handling logic for your use case\n      if (error.response) {\n        console.error(error.response.status, error.response.data);\n        this.pushChatContent(\"Madre mía ¡¡ los cien caballos de bonanza se me han escapao ¡¡\",'ChiquiTronic','bot'); \n        \n      } else {\n        console.error(`Error with OpenAI API request: ${error.message}`);\n        \n      }\n    }\n  }\n\n  rabbitState: string = '';\n\n  startAnimation() {\n    this.rabbitState = 'running';\n    setTimeout(() => {\n      this.rabbitState = 'love';\n      setTimeout(() => {\n        this.rabbitState = '';\n      }, 500);\n    }, 2000);\n  }\n}\n","<!-- <div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <br>\n                <div class=\"card\">\n                    <h4 class=\"card-header center neon\">ChiquiTronic</h4>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title text-success center\"></h6>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\"></div>\n                            <div class=\"col-md-12\">\n                                <div class=\"frame-box\">\n                                    <div *ngFor=\"let item of chatConversation\">\n                                        <p class=\"card-text padding\" [ngClass]=\"item.cssClass\">\n                                            {{item.person}} :  {{getText(item.response)}}                                                                                                            \n                                        </p>\n                                        \n                                    </div>\n                                    <div><img src=\"../../assets/ZNeT.gif\" *ngIf=\"showSpinner\" width=\"50px\" height=\"50px\"></div>\n                                    \n                                </div>\n                                <br>\n                                    <textarea row=\"3\" cols=\"15\" class=\"form-control\" [(ngModel)]=\"promptText\" placeholder=\"Apúnta bien ¡¡\"></textarea>\n                                    <br>\n                                        <button class=\"btn btn-primary push-right\" (click)=\"checkResponse()\">Send</button>\n                                    </div>\n                                    <div class=\"col-md-2\">\n                                      \n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n             -->\n\n<div class=\"container\">\n\n    <div class=\"row\">\n        <div class=\"d-flex justify-content-end\">\n<!--             <textarea row=\"3\" cols=\"15\" class=\"form-control\" [(ngModel)]=\"promptText\"\n                placeholder=\"Apúnta bien ¡¡\"></textarea>\n            <button class=\"btn btn-primary\" (click)=\"checkResponse()\">Send</button>\n -->\n            <input class=\"form-control me-2 \" type=\"search\"  [(ngModel)]=\"promptText\"\n            placeholder=\"IntroduceloL ¡¡ by milio raban\" aria-label=\"Search\">\n            <button class=\"btn btn-outline-secondary\" type=\"submit\" (click)=\"checkResponse()\">comol</button>\n        </div>\n        <div class=\"col-md-12\">\n            <br>\n            <div class=\"card\">\n                <h4 class=\"card-header center neon\">Chiqui Chat</h4>\n                <div class=\"card-body\">\n                    <h6 class=\"card-title text-success center\"></h6>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\"></div>\n                        <div class=\"col-md-12\">\n                            <div class=\"frame-box\">\n                                <div><img src=\"../../assets/ZNeT.gif\" *ngIf=\"showSpinner\" width=\"50px\" height=\"50px\">\n                                <div *ngFor=\"let item of chatConversation\">\n                                    <p class=\"card-text padding\" [ngClass]=\"item.cssClass\">\n                                        <b>{{item.person}}:</b> {{getText(item.response)}}\n                                    </p>\n                                </div>\n         \n                                </div>\n                            </div>\n                            <br>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}