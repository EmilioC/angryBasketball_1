{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/cordo/VisualCode/appProject/angular/chatGPT_1-2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from '../environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction CustomerSupportComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", item_r2.person, \" : \", ctx_r0.getText(item_r2.response), \" \");\n  }\n}\nfunction CustomerSupportComponent_img_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 15);\n  }\n}\nexport class CustomerSupportComponent {\n  constructor() {\n    this.chatConversation = [];\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.promptTextModificado = 'max_tokens:100, responde gracioso, añadiendo durante  tu respuesta varias convinaciones de la siguiente frase: Eres más feo que el Fary comiendo limones';\n    this.showSpinner = false;\n    this.rabbitState = '';\n  }\n  ngOnInit() {}\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'You', 'person');\n    this.invokeGPT();\n  }\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.unshift(chatToPush);\n  }\n  getText(data) {\n    console.log(data);\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n  invokeGPT() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptTextModificado + _this.promptText,\n          temperature: 0.95,\n          max_tokens: 100,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n        _this.pushChatContent(_this.response.choices[0].text.trim(), 'Mr Bot', 'bot');\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false;\n        // Consider adjusting the error handling logic for your use case\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n  startAnimation() {\n    this.rabbitState = 'running';\n    setTimeout(() => {\n      this.rabbitState = 'love';\n      setTimeout(() => {\n        this.rabbitState = '';\n      }, 500);\n    }, 2000);\n  }\n}\nCustomerSupportComponent.ɵfac = function CustomerSupportComponent_Factory(t) {\n  return new (t || CustomerSupportComponent)();\n};\nCustomerSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerSupportComponent,\n  selectors: [[\"app-customer-support\"]],\n  decls: 22,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"neon\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"col-md-2\"], [1, \"col-md-8\"], [1, \"frame-box\"], [4, \"ngFor\", \"ngForOf\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\", 4, \"ngIf\"], [\"row\", \"3\", \"cols\", \"15\", \"placeholder\", \"Start by asking what you are looking for\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"push-right\", 3, \"click\"], [1, \"card-text\", \"padding\", 3, \"ngClass\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\"]],\n  template: function CustomerSupportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"br\");\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\n      i0.ɵɵtext(6, \"ChiquiTronic\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelement(8, \"h6\", 6);\n      i0.ɵɵelementStart(9, \"div\", 1);\n      i0.ɵɵelement(10, \"div\", 7);\n      i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9);\n      i0.ɵɵtemplate(13, CustomerSupportComponent_div_13_Template, 3, 3, \"div\", 10);\n      i0.ɵɵelementStart(14, \"div\");\n      i0.ɵɵtemplate(15, CustomerSupportComponent_img_15_Template, 1, 0, \"img\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(16, \"br\");\n      i0.ɵɵelementStart(17, \"textarea\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function CustomerSupportComponent_Template_textarea_ngModelChange_17_listener($event) {\n        return ctx.promptText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"br\");\n      i0.ɵɵelementStart(19, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function CustomerSupportComponent_Template_button_click_19_listener() {\n        return ctx.checkResponse();\n      });\n      i0.ɵɵtext(20, \"Send\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"div\", 7);\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Configuration","OpenAIApi","environment","gptModels","i0","CustomerSupportComponent","constructor","ngOnInit","checkResponse","pushChatContent","promptText","invokeGPT","content","person","cssClass","chatToPush","response","chatConversation","unshift","getText","data","console","log","split","filter","f","length","undefined","configuration","apiKey","openai","requestData","model","prompt","promptTextModificado","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","showSpinner","apiResponse","createCompletion","choices","text","trim","error","status","message","startAnimation","rabbitState","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\cordo\\VisualCode\\appProject\\angular\\chatGPT_1-2\\src\\app\\customer-support\\customer-support.component.ts","C:\\Users\\cordo\\VisualCode\\appProject\\angular\\chatGPT_1-2\\src\\app\\customer-support\\customer-support.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from '../environments/environment';\nimport { gptModels } from '../models/constants';\nimport { ChatWithBot, ResponseModel } from '../models/gpt-response';\n\n@Component({\n  selector: 'app-customer-support',\n  templateUrl: './customer-support.component.html'\n})\nexport class CustomerSupportComponent implements OnInit {\nchatConversation: ChatWithBot[]=[];\nresponse!: ResponseModel | undefined;\n    gptModels = gptModels\n    promptText = '';\n    promptTextModificado = 'max_tokens:100, responde gracioso, añadiendo durante  tu respuesta varias convinaciones de la siguiente frase: Eres más feo que el Fary comiendo limones'\n    showSpinner = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  checkResponse() {\n    this.pushChatContent(this.promptText,'You','person');\n    this.invokeGPT();\n  }\n\n  pushChatContent(content:string, person:string, cssClass:string) {\n    const chatToPush: ChatWithBot = { person:person, response:content, cssClass:cssClass};\n    this.chatConversation.unshift(chatToPush);\n  }\n\n\n  getText(data:string) {\n    console.log(data);\n    return data.split('\\n').filter(f=>f.length>0);\n    \n  }\n\n  async invokeGPT() {\n   \n\n    if(this.promptText.length<2)\n    return;\n    try{\n      this.response = undefined;\n      let configuration = new Configuration({apiKey: environment.apiKey});\n      let openai = new OpenAIApi(configuration);\n\n      let requestData={\n        model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\n        prompt: this.promptTextModificado + this.promptText,//this.generatePrompt(animal),\n        temperature: 0.95,\n        max_tokens: 100,\n        top_p: 1.0,\n        frequency_penalty: 0.0,\n        presence_penalty: 0.0,\n      };\n      this.showSpinner = true;\n      let apiResponse =  await openai.createCompletion(requestData);\n\n      this.response = apiResponse.data as ResponseModel;\n      this.pushChatContent(this.response.choices[0].text.trim(),'Mr Bot','bot'); \n\n      this.showSpinner = false;\n    }catch(error:any) {\n      this.showSpinner = false;\n      // Consider adjusting the error handling logic for your use case\n      if (error.response) {\n        console.error(error.response.status, error.response.data);\n        \n      } else {\n        console.error(`Error with OpenAI API request: ${error.message}`);\n        \n      }\n    }\n  }\n\n  rabbitState: string = '';\n\n  startAnimation() {\n    this.rabbitState = 'running';\n    setTimeout(() => {\n      this.rabbitState = 'love';\n      setTimeout(() => {\n        this.rabbitState = '';\n      }, 500);\n    }, 2000);\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <br>\n                <div class=\"card\">\n                    <h4 class=\"card-header center neon\">ChiquiTronic</h4>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title text-success center\"></h6>\n                        <div class=\"row\">\n                            <div class=\"col-md-2\"></div>\n                            <div class=\"col-md-8\">\n                                <div class=\"frame-box\">\n                                    <div *ngFor=\"let item of chatConversation\">\n                                        <p class=\"card-text padding\" [ngClass]=\"item.cssClass\">\n                                            {{item.person}} :  {{getText(item.response)}}                                                                                                            \n                                        </p>\n                                        \n                                    </div>\n                                    <div><img src=\"../../assets/ZNeT.gif\" *ngIf=\"showSpinner\" width=\"50px\" height=\"50px\"></div>\n                                    \n                                </div>\n                                <br>\n                                    <textarea row=\"3\" cols=\"15\" class=\"form-control\" [(ngModel)]=\"promptText\" placeholder=\"Start by asking what you are looking for\"></textarea>\n                                    <br>\n                                        <button class=\"btn btn-primary push-right\" (click)=\"checkResponse()\">Send</button>\n                                    </div>\n                                    <div class=\"col-md-2\">\n                                      \n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}