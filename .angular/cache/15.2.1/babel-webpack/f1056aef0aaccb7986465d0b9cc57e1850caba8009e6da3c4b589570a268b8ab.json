{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/cordo/VisualCode/appProject/angular/chatGPT_1-2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from '../environments/environment';\nimport { gptModels } from '../models/constants';\nimport { frasesChiquito } from '../../assets/data/arrayFrasesChiquito';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction CustomerSupportComponent_img_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 13);\n  }\n}\nfunction CustomerSupportComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 14)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", item_r2.person, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getText(item_r2.response), \" \");\n  }\n}\nexport class CustomerSupportComponent {\n  constructor() {\n    this.chatConversation = [];\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.arrayFrasesChiquito = frasesChiquito;\n    this.promptTextModificado = 'responde gracioso, añadiendo durante tu respuesta varias convinaciones de la siguiente frase:';\n    this.showSpinner = false;\n    this.rabbitState = '';\n  }\n  ngOnInit() {}\n  fraseAleatoria(array) {\n    const indice = Math.floor(Math.random() * array.length);\n    return array[indice];\n  }\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'Fistro pecador', 'person');\n    this.invokeGPT();\n    this.promptText = '';\n  }\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.unshift(chatToPush);\n  }\n  getText(data) {\n    console.log(data);\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n  invokeGPT() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptTextModificado + _this.fraseAleatoria(frasesChiquito) + _this.promptText,\n          temperature: 0.95,\n          max_tokens: 100,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n        _this.pushChatContent(_this.response.choices[0].text.trim(), 'ChiquiTronic', 'bot');\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false;\n        // Consider adjusting the error handling logic for your use case\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n          _this.pushChatContent(\"Madre mía ¡¡ los cien caballos de bonanza se me han escapao ¡¡\", 'ChiquiTronic', 'bot');\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n  startAnimation() {\n    this.rabbitState = 'running';\n    setTimeout(() => {\n      this.rabbitState = 'love';\n      setTimeout(() => {\n        this.rabbitState = '';\n      }, 500);\n    }, 2000);\n  }\n}\nCustomerSupportComponent.ɵfac = function CustomerSupportComponent_Factory(t) {\n  return new (t || CustomerSupportComponent)();\n};\nCustomerSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerSupportComponent,\n  selectors: [[\"app-customer-support\"]],\n  decls: 21,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"d-flex\", \"justify-content-end\"], [\"type\", \"search\", \"placeholder\", \"IntroduceloL \\u00A1\\u00A1 by milio raban\", \"aria-label\", \"Search\", 1, \"form-control\", \"me-2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"neon\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"frame-box\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\"], [1, \"card-text\", \"padding\", 3, \"ngClass\"]],\n  template: function CustomerSupportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function CustomerSupportComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.promptText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function CustomerSupportComponent_Template_button_click_4_listener() {\n        return ctx.checkResponse();\n      });\n      i0.ɵɵtext(5, \"comol\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"h4\", 7);\n      i0.ɵɵtext(10, \"Chiqui Chat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 8);\n      i0.ɵɵelement(12, \"h6\", 9);\n      i0.ɵɵelementStart(13, \"div\", 1);\n      i0.ɵɵelement(14, \"div\", 5);\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"div\", 10)(17, \"div\");\n      i0.ɵɵtemplate(18, CustomerSupportComponent_img_18_Template, 1, 0, \"img\", 11);\n      i0.ɵɵtemplate(19, CustomerSupportComponent_div_19_Template, 5, 3, \"div\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  encapsulation: 2\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}